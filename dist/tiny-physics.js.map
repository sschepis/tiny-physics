{
  "version": 3,
  "sources": ["../src/index.js"],
  "sourcesContent": ["var Physics = (function () {\n    var objects = []; // array of objects\n    var paused = false; // whether or not the physics engine is paused\n    var size = { width: 1920, height: 1080 }; // size of the physics world. objects can't go outside of this area, and wrap around to the other side\n    var lastTime = 0; // last time Physics.render() was called\n    var forces = []; // array of forces\n    var viewport = { x: 0, y: 0, width: 0, height: 0 };\n    var create = function (options) {\n        if (options.objects) {\n            for (var i = 0; i < options.objects.length; i++) {\n                objects.push(new PhysicsObject(options.objects[i]));\n            }\n        } else { objects.push(new PhysicsObject(options)); }\n        if (options.speed) { speed = options.speed; }\n        if (options.viewport) { viewport = options.viewport; }\n        if (options.forces) {\n            for (var i = 0; i < options.forces.length; i++) {\n                if (forces.indexOf(options.forces[i]) == -1) {\n                    forces.push(options.forces[i]);\n                }\n            }\n        }\n        if(options.size) { size = options.size; }\n    };\n    var setSpeed = function (newSpeed) {\n        speed = newSpeed;\n    };\n    var setViewport = function (newViewport) {\n        viewport = newViewport;\n    };\n    var setRenderer = function (renderer) {\n        render = renderer;\n    };\n    var addForce = function (force) {\n        forces.push(force);\n    };\n    var pause = function () {\n        paused = true;\n    };\n    var resume = function () {\n        paused = false;\n        if (lastTime == 0) {\n            lastTime = Date.now();\n        }\n        render();\n    };\n    var rewind = function () {\n        lastTime = 0;\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].rewind();\n        }\n    };\n    var reset = function () {\n        // reset the physics engine\n        objects = [];\n        paused = false;\n        speed = 1;\n        lastTime = 0;\n    };\n    class PhysicsObject {\n        constructor(options) {\n            this.type = options.type;\n            this.x = options.x;\n            this.y = options.y;\n            this.vx = options.vx;\n            this.vy = options.vy;\n            this.ax = options.ax;\n            this.ay = options.ay;\n            this.mass = options.mass;\n            this.radius = options.radius;\n            this.width = options.width;\n            this.height = options.height;\n            this.angle = options.angle;\n            this.angularVelocity = options.angularVelocity;\n            this.angularAcceleration = options.angularAcceleration;\n            this.color = options.color;\n            this.lineWidth = options.lineWidth;\n            this.points = options.points;\n            this.renderer = options.renderer;\n            this.lastX = this.x;\n            this.lastY = this.y;\n            this.lastAngle = this.angle;\n        }\n        // update the object, accounting for forces\n        update(dt) {\n            this.lastX = this.x;\n            this.lastY = this.y;\n            this.lastAngle = this.angle;\n            this.vx += this.ax * dt;\n            this.vy += this.ay * dt;\n            this.x += this.vx * dt;\n            this.y += this.vy * dt;\n            this.ax = 0;\n            this.ay = 0;\n            this.angularAcceleration = 0;\n            this.angularVelocity += this.angularAcceleration * dt;\n            this.angle += this.angularVelocity * dt;\n            for (var i = 0; i < forces.length; i++) {\n                forces[i].apply(this, dt);\n            }\n            if (this.x < 0) {\n                this.x = size.width + this.x;\n            }\n            if (this.x > size.width) {\n                this.x = this.x - size.width;\n            }\n            if (this.y < 0) {\n                this.y = size.height + this.y;\n            }\n            if (this.y > size.height) {\n                this.y = this.y - size.height;\n            }\n        };\n        rewind() {\n            this.x = this.lastX;\n            this.y = this.lastY;\n            this.angle = this.lastAngle;\n        };\n        render(context) {\n            if (this.renderer) {\n                this.renderer(context, this);\n            } else {\n                // scale the coordinates to the viewport\n                var x = this.x - viewport.x;\n                var y = this.y - viewport.y;\n                x = x / viewport.width * canvas.width;\n                y = y / viewport.height * canvas.height;\n\n                var scaleX = canvas.width / viewport.width\n                var scaleY = canvas.height / viewport.height;\n\n                context.beginPath();\n                if (this.type == \"circle\") {\n                    context.arc(x, y, this.radius * scaleX, 0, 2 * Math.PI, false);\n                } else if (this.type == \"rectangle\") {\n                    context.rect(\n                        x - this.width * scaleX / 2,\n                        y - this.height * scaleY / 2,\n                        this.width * scaleX,\n                        this.height * scaleY\n                    );\n                } else if (this.type == \"polygon\") {\n                    context.moveTo(\n                        x + this.points[0].x * scaleX,\n                        y + this.points[0].y * scaleY\n                    );\n                    for (var i = 1; i < this.points.length; i++) {\n                        context.lineTo(\n                            x + this.points[i].x * scaleX,\n                            y + this.points[i].y * scaleY\n                        );\n                    }\n                    context.closePath();\n                } else if (this.type == \"particle\") {\n                    context.arc(x, y, 2, 0, 2 * Math.PI, false);\n                }\n                context.fillStyle = this.color;\n                context.fill();\n                context.lineWidth = this.lineWidth;\n                context.strokeStyle = this.color;\n                context.stroke();\n            }\n            context.restore();\n        };\n    }\n    var render = function () {\n        // render the scene\n        var now = Date.now();\n        var dt = (now - lastTime);\n        lastTime = now;\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        \n        // render renderable forces\n        for (var i = 0; i < forces.length; i++) {\n            if (forces[i].render) {\n                forces[i].render(context);\n            }\n        }\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].update(dt/100);\n        }\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].render(context);\n        }\n        if (!paused) { requestAnimationFrame(render); }\n    };\n    var gravity = function (forceMinRadius, forceMaxRadius, strength) {\n        return {\n            apply: function (object, dt) {\n                var dx, dy, distance, force;\n                for (var i = 0; i < objects.length; i++) {\n                    if (objects[i] != object) {\n                        dx = objects[i].x - object.x;\n                        dy = objects[i].y - object.y;\n                        distance = Math.sqrt(dx * dx + dy * dy);\n                        if (distance > forceMinRadius && distance < forceMaxRadius) {\n                            force = strength * object.mass * objects[i].mass / (distance * distance);\n                            if (distance < forceMinRadius) { distance = forceMinRadius; }\n                            object.ax += force * dx / distance / object.mass;\n                            object.ay += force * dy / distance / object.mass;\n                            objects[i].ax -= force * dx / distance / object.mass;\n                            objects[i].ay -= force * dy / distance / object.mass;\n                        }\n                    }\n                }\n            }\n        };\n    };\n    var repulsion = function (forceMinRadius, forceMaxRadius, strength) {\n        // create a repulstion force\n        return {\n            apply: function (object, dt) {\n                for (var i = 0; i < objects.length; i++) {\n                    var otherobject = objects[i];\n                    if (otherobject != object) {\n                        var dx = otherobject.x - object.x,\n                            dy = otherobject.y - object.y,\n                            distance = Math.sqrt(dx * dx + dy * dy),\n                            force = (strength * object.mass * otherobject.mass) / distance\n                        if (distance > forceMinRadius && distance < forceMaxRadius) {\n                            object.ax += (force * dx) / (distance * object.mass) * dt;\n                            object.ay += (force * dy) / (distance * object.mass) * dt;\n                        }\n                    }\n                }\n            }\n        };\n    }\n    var drag = function (coefficient) {\n        // create a drag force\n        return {\n            apply: function (object, dt) {\n                var speed = Math.sqrt(object.vx * object.vx + object.vy * object.vy);\n                var dragMagnitude = coefficient * speed * speed;\n                object.vx -= ((dragMagnitude * object.vx) / object.mass) * dt;\n                object.vy -= ((dragMagnitude * object.vy) / object.mass) * dt;\n            }\n        };\n    };\n    var spring = function (options) {\n        var springConstant = options.springConstant;\n        var dampingConstant = options.dampingConstant;\n        var restLength = options.restLength;\n        var targetobject = options.object1;\n        return {\n            apply: function (object, dt) {\n                var dx = targetobject.x - object.x;\n                var dy = targetobject.y - object.y;\n                var distance = Math.sqrt(dx * dx + dy * dy);\n                var springForce = springConstant * (distance - restLength);\n                var dampingForce =\n                    (dampingConstant * (targetobject.vx - object.vx) * dx) / distance +\n                    ((targetobject.vy - object.vy) * dy) / distance;\n                var totalForce = springForce + dampingForce;\n                object.vx += ((totalForce * dx) / distance / object1.mass) * dt;\n                object.vy += ((totalForce * dy) / distance / object1.mass) * dt;\n                object.vx -= ((totalForce * dx) / distance / object2.mass) * dt;\n                object.vy -= ((totalForce * dy) / distance / object2.mass) * dt;\n            }\n        };\n    };\n    var boundary = function (options) {\n        var restitution = options.restitution;\n        var left = options.left;\n        var top = options.top;\n        var right = options.right;\n        var bottom = options.bottom;\n        return {\n            apply: function (object, dt) {\n                if (object.x - object.radius < left) {\n                    object.x = left + object.radius\n                    object.vx = -restitution * object.vx * dt;\n                } else if (object.x + object.radius > right) {\n                    object.x = right - object.radius;\n                    object.vx = -restitution * object.vx * dt;\n                }\n                if (object.y - object.radius < top) {\n                    object.y = top + object.radius;\n                    object.vy = -restitution * object.vy * dt;\n                } else if (object.y + object.radius > bottom) {\n                    object.y = bottom - object.radius;\n                    object.vy = -restitution * object.vy * dt;\n                }\n            },\n            render: function () {\n                var scaleW = size.width / viewport.width;\n                var scaleH = size.height / viewport.height;\n                // scale the rect to viewport amd scaling\n                var x = left * scaleW;\n                var y = top * scaleH;\n                var width = (right - left) * scaleW;\n                var height = (bottom - top) * scaleH;\n                // draw the rect\n                context.strokeStyle = 'red';\n                context.strokeRect(x, y, width, height);\n            }\n        };\n    };\n    var overlapResolver = function (options) {\n        return {\n            apply: function (object, dt) {\n                // first we create a list of all the objects that are overlapping with each other\n                var overlaps = [];\n                for (var i = 0; i < objects.length; i++) {\n                    for (var j = i + 1; j < objects.length; j++) {\n                        var object1 = objects[i];\n                        var object2 = objects[j];\n                        var dx = object1.x - object2.x;\n                        var dy = object1.y - object2.y;\n                        var distance = Math.sqrt(dx * dx + dy * dy);\n                        if (distance < (object1.radius + object2.radius)*2 ) {\n                            overlaps.push({\n                                object1: object1,\n                                object2: object2,\n                                distance: distance\n                            });\n                        }\n                    }\n                }\n                // then we sort the list by distance\n                overlaps.sort(function (a, b) {\n                    return a.distance - b.distance;\n                });\n                // then we resolve the overlaps - we use a while loop because \n                // the list of overlaps may change as we resolve them. the while loop \n                // runs until there are no more overlaps or until maxIterations (5) is reached\n                if(!overlaps.length) return;\n                var maxIterations = 5;\n                var iteration = 0;\n                while (overlaps.length > 0 && iteration < maxIterations) {\n                    iteration++;\n                    var overlap = overlaps.shift();\n                    var object1 = overlap.object1;\n                    var object2 = overlap.object2;\n                    var dx = object1.x - object2.x;\n                    var dy = object1.y - object2.y;\n                    var distance = Math.sqrt(dx * dx + dy * dy);\n                    var overlap = object1.radius + object2.radius - distance;\n                    if(overlap < 0) continue;\n                    var nx = dx / distance;\n                    var ny = dy / distance;\n                    var tx = -ny;\n                    var ty = nx;\n                    var dpTan1 = object1.vx * tx + object1.vy * ty;\n                    var dpTan2 = object2.vx * tx + object2.vy * ty;\n                    var dpNorm1 = object1.vx * nx + object1.vy * ny;\n                    var dpNorm2 = object2.vx * nx + object2.vy * ny;\n                    var m1 = (dpNorm1 * (object1.mass - object2.mass) + 2 * object2.mass * dpNorm2) / (object1.mass + object2.mass);\n                    var m2 = (dpNorm2 * (object2.mass - object1.mass) + 2 * object1.mass * dpNorm1) / (object1.mass + object2.mass);\n                    object1.vx = tx * dpTan1 + nx * m1;\n                    object1.vy = ty * dpTan1 + ny * m1;\n                    object2.vx = tx * dpTan2 + nx * m2;\n                    object2.vy = ty * dpTan2 + ny * m2;\n                    object1.x += nx * overlap / 2;\n                    object1.y += ny * overlap / 2;\n                    object2.x -= nx * overlap / 2;\n                    object2.y -= ny * overlap / 2;\n                }\n            }\n        };\n    }\n\n    var createPolygon = (x, y, radius, sides) => {\n        var points = [];\n        for (var i = 0; i < sides; i++) {\n            var angle = (i / sides) * Math.PI * 2;\n            points.push({\n                x: x + radius * Math.cos(angle),\n                y: y + radius * Math.sin(angle)\n            });\n        }\n        return points;\n    }\n   \n    return {\n        PhysicsObject,\n        create: create,\n        pause,\n        resume,\n        rewind,\n        reset,\n        setSpeed,\n        setRenderer,\n        addForce,\n        setViewport,\n        createPolygon,\n        forces: {\n            gravity: gravity,\n            drag: drag,\n            spring: spring,\n            boundary: boundary,\n            repulsion: repulsion,\n            overlapResolver: overlapResolver,\n        }\n    };\n})();\n\n"],
  "mappings": "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",
  "names": ["Physics", "objects", "paused", "size", "lastTime", "forces", "viewport", "create", "options", "i", "PhysicsObject", "setSpeed", "newSpeed", "setViewport", "newViewport", "setRenderer", "renderer", "render", "addForce", "force", "pause", "resume", "rewind", "reset", "dt", "context", "x", "y", "scaleX", "scaleY", "now", "gravity", "forceMinRadius", "forceMaxRadius", "strength", "object", "dx", "dy", "distance", "repulsion", "otherobject", "drag", "coefficient", "speed", "dragMagnitude", "spring", "springConstant", "dampingConstant", "restLength", "targetobject", "springForce", "dampingForce", "totalForce", "boundary", "restitution", "left", "top", "right", "bottom", "scaleW", "scaleH", "width", "height", "overlapResolver", "overlaps", "j", "object1", "object2", "a", "b", "maxIterations", "iteration", "overlap", "nx", "ny", "tx", "ty", "dpTan1", "dpTan2", "dpNorm1", "dpNorm2", "m1", "m2", "createPolygon", "radius", "sides", "points", "angle"]
}
